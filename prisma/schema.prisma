// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String               @id @default(cuid())
  username              String               @unique
  email                 String               @unique
  hashedPassword        String
  posts                 Post[]
  comments              Comment[]
  subscribedCommunities UsersOnCommunities[]
  upvotedPosts          Post[]               @relation("UpvotesOnPosts")
  downvotedPosts        Post[]               @relation("DownvotesOnPosts")
  bookmarkedPosts       Post[]               @relation("BookmarkedPosts")
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt

  @@map("users")
}

model Community {
  id          String               @id @default(cuid())
  name        String               @unique
  description String?
  posts       Post[]
  subscribers UsersOnCommunities[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  @@map("communities")
}

model UsersOnCommunities {
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  community   Community @relation(fields: [communityId], references: [id])
  communityId String
  isModerator Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@id([userId, communityId])
}

model Post {
  id          String    @id @default(cuid())
  title       String
  content     String
  author      User      @relation(fields: [userId], references: [id])
  userId      String
  community   Community @relation(fields: [communityId], references: [id])
  communityId String
  comments    Comment[]
  isNSFW      Boolean   @default(false)
  isSpoiler   Boolean   @default(false)
  upvotes     User[]    @relation("UpvotesOnPosts")
  downvotes   User[]    @relation("DownvotesOnPosts")
  bookmarks   User[]    @relation("BookmarkedPosts")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("posts")
}

model Comment {
  id      String @id @default(cuid())
  author  User   @relation(fields: [userId], references: [id])
  userId  String
  content String
  Post    Post   @relation(fields: [postId], references: [id])
  postId  String

  parentCommentId String?   @unique
  parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id])
  replies         Comment[] @relation("CommentReplies")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}
